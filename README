A preemptive,multi-scheduling Kernel Developed for X86-64 architecture:

Project Submission : CSE 506

Points : 60 (Cooperative,preemptive scheduling)

Binaries Implemented:
echo
ls
cat
echo
kill
ps
sleep
fc ( Code to test for memory usage by spawing a million forks)

Shell : sbush
Shell Builtins:
clear
cd
pwd

Other functionalites :
* Runs scripts using ./ command.
* Run scripts using !# (shebang)
    Ex:
    !# bin/<yourshell>
    ls
    pwd

References Used:
1. http://www.brokenthorn.com/Resources/
2. http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory/
3. http://venkateshabbarapu.blogspot.com/2012/10/process-in-linux-kernel.html
4. https://notes.shichao.io/apue/ch8/#fork-function
5. http://forum.osdev.org/
6. http://www.inf.udec.cl/~leo/Malloc_tutorial.pdf
7. https://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64/






* The provided Makefile:
  1) builds a kernel
  2) copies it into rootfs/boot/kernel/kernel
  3) creates an ISO CD image with the rootfs/ contents

* To boot the system in QEMU, run:
qemu-system-x86_64 -curses -drive id=boot,format=raw,file=$USER.img,if=none -drive id=data,format=raw,file=$USER-data.img,if=none -device ahci,id=ahci -device ide-drive,drive=boot,bus=ahci.0 -device ide-drive,drive=data,bus=ahci.1 -gdb tcp::9999

Explanation of parameters:
  -curses         use a text console (omit this to use default SDL/VNC console)
  -drive ...      connect a CD-ROM or hard drive with corresponding image
  -device ...     configure an AHCI controller for the boot and data disks
  -gdb tcp::9999  listen for "remote" debugging connections on port NNNN
  -S              wait for GDB to connect at startup
  -no-reboot      prevent reboot when OS crashes

* When using the -curses mode, switch to the qemu> console with ESC-2.

* To connect a remote debugger to the running qemu VM, from a different window:
gdb ./kernel

At the (gdb) prompt, connect with:
target remote localhost:9999
